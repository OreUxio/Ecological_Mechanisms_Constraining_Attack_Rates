agg_granularity<-20
####### Statistics for the invasion probability using speciate() function ####
# Data preperation #####
webfiles<-sample(list.files(pattern = "web*[1-9][0-9][0-9]"),invasion_prob_number_files)
agg<-species_fitness_equilibrium$agg
web_numbs<-webfiles
test_agg<-10^seq(-6,-4.5,length.out=agg_granularity)
store<-data.frame(rep(test_agg,replicates_per_web*length(webfiles)));colnames(store)<-"agg";store<-data.frame(store[order(store$agg),]);colnames(store)<-"agg"
store$web<-rep(web_numbs,length(test_agg));store<-store[order(store$agg,store$web),];store$replicates<-rep(1:replicates_per_web,length(web_numbs)*length(test_agg));
store$fitness<-0;
seeds<-sample(1:10^4, size=replicates_per_web+2, replace = FALSE, prob = NULL)
total<-dim(store)[1]
system("rm before*")
command<-paste("/home/ore/Documents/Academic/PhD_Queen_Mary_2/all/Project_Code/C_++/NewWeb_new_new/build/Inspect -k random_seed=",
seeds[(i%%replicates_per_web+1)],
" -W ",0.1," ",
store[1,]$web,sep="")
system(command)
com_agg<-read.table("before_agg_for_matrix.dat")$V2
Sr<-sum(com_agg==com_agg[1])
com_agg<-com_agg[which(com_agg!=com_agg[1])]
# f_agg<-sample(com_agg,1)
# aggressivity_decay*(typical_aggressivity_ratio_da^rnorm(1,0,1))*f_agg
# store[i,]$agg<-f_agg
system("rm fitness_only.dat", wait=T,ignore.stdout=F,ignore.stderr = F)
# Simulation ####
for (i in (1:total)){
if (i%%replicates_per_web==0){seeds<-sample(1:10^4, size=replicates_per_web+1, replace = FALSE, prob = NULL)}
cat(i/total*100,"%","\r")
# command<-paste("singularity exec ../../../PDMM.img ../../../NewWeb/build/Inspect -k random_seed=",
command<-paste("/home/ore/Documents/Academic/PhD_Queen_Mary_2/all/Project_Code/C_++/NewWeb_new/build/Inspect -k random_seed=",
seeds[(i%%replicates_per_web+1)],
" -W ",store[i,]$agg," ",
store[i,]$web,sep="")
system("ulimit -c 0")
system(command, wait=T,ignore.stdout=T,ignore.stderr = T)
store[i,]$fitness<-read.table("fitness_only.dat",sep = " ")[,4];
system("rm fitness_only.dat", wait=T,ignore.stdout=F,ignore.stderr = F)
}
#Plot simulated  invasion fitness of a mutant and ... ####
invasion_prob_replicates<-replicates_per_web*length(webfiles)
fitness_plyr<-function(x){
return(sum(x>=0)/(invasion_prob_replicates))
}
mean_invasion_fitness_per_web<-ddply(store,.(agg,web),summarise,sim_prob=fitness_plyr(fitness))
with(mean_invasion_fitness_per_web,plot(log10(agg),sim_prob))
mu_sd<-find_mu_sd(Sr,sigma)
mu<-unlist(mu_sd[1]);sd<-unlist(mu_sd[2])
invasion_prob<-function(a_m,mu,sd){
pass<-(log(respiration/(the_conversion_efficiency_epsilon*a_m*K))-as.numeric(mu))/as.numeric(sd)
return(1-pnorm(pass,0,1))
}
#... compare to predicted ####
x_agg<-mean_invasion_fitness_per_web$agg
mean_invasion_fitness_per_web$pred_prob<-invasion_prob(x_agg,mu,sd)
with(mean_invasion_fitness_per_web,lines(log10(agg),pred_prob,col="red"))
#To get the right fit we need to approximate K=0.4 ...
mean_invasion_fitness_across_web<-ddply(store,.(agg),summarise,mean.fitness=fitness_plyr(fitness))
list_w<-unique(mean_invasion_fitness_per_web$web)
rm(list=setdiff(ls(),c("mean_invasion_fitness_per_web","Sr")))
save.image("invasion_prob_full.RData")
Sr
library(plyr)
setwd("~/Documents/Academic/PhD_Queen_Mary_2/all/Paper_Data/R/Full")
load("all_data_3.RData")
#Functions #######
invasion_prob<-function(l_a_m,mu,sd){
pass<-(log(respiration/(the_conversion_efficiency_epsilon*exp(l_a_m)*K*0.5))-as.numeric(mu))/as.numeric(sd)
return(1-pnorm(pass,0,1))
}
#Joint probability of yielding mutant (given resident) and that the mutant succesfuly invades
joint_prob<-function(l_a_mm,l_a_rr,mu,sd){
return(dnorm(l_a_mm,m_a+l_a_rr,s_a)*invasion_prob(l_a_mm,mu,sd))
}
#Birth probability: intergrate joint probability over all possible mutants.
birth_prob<-function(l_a_rr,mu,sd){
return(integrate(joint_prob,lower=-20,upper=0,l_a_rr=l_a_rr,mu=mu,sd=sd)$value)
}
find_mu_sd<-function(s_r,sigmaa){
n_samples<-1000#Number of samples
sum_m<-rep(0,n_samples)
for (i in 1:n_samples){
# sum_m[i]<-sum(head(sort(exp(sigmaa*rnorm(s_r,0,1))),-1))
sum_m[i]<-sum(exp(sigmaa*rnorm(s_r,0,1)))
}
mean_sum_m<-mean(log(sum_m))
sd_sum_m<-(var(log(sum_m)))^0.5
out<-list(mean_sum_m,sd_sum_m)
return(out)
}
##### options ####
invasion_prob_number_files<-1
replicates_per_web<-300
agg_granularity<-20
####### Statistics for the invasion probability using speciate() function ####
# Data preperation #####
repeat{
webfiles<-sample(list.files(pattern = "web*[1-9][0-9][0-9]"),invasion_prob_number_files)
agg<-species_fitness_equilibrium$agg
web_numbs<-webfiles
test_agg<-10^seq(-6,-4.5,length.out=agg_granularity)
store<-data.frame(rep(test_agg,replicates_per_web*length(webfiles)));colnames(store)<-"agg";store<-data.frame(store[order(store$agg),]);colnames(store)<-"agg"
store$web<-rep(web_numbs,length(test_agg));store<-store[order(store$agg,store$web),];store$replicates<-rep(1:replicates_per_web,length(web_numbs)*length(test_agg));
store$fitness<-0;
seeds<-sample(1:10^4, size=replicates_per_web+2, replace = FALSE, prob = NULL)
total<-dim(store)[1]
system("rm before*")
command<-paste("/home/ore/Documents/Academic/PhD_Queen_Mary_2/all/Project_Code/C_++/NewWeb_new_new/build/Inspect -k random_seed=",
seeds[(i%%replicates_per_web+1)],
" -W ",0.1," ",
store[1,]$web,sep="")
system(command)
com_agg<-read.table("before_agg_for_matrix.dat")$V2
Sr<-sum(com_agg==com_agg[1])
if(Sr>400)break
}
library(plyr)
setwd("~/Documents/Academic/PhD_Queen_Mary_2/all/Paper_Data/R/Full")
load("all_data_3.RData")
#Functions #######
invasion_prob<-function(l_a_m,mu,sd){
pass<-(log(respiration/(the_conversion_efficiency_epsilon*exp(l_a_m)*K*0.5))-as.numeric(mu))/as.numeric(sd)
return(1-pnorm(pass,0,1))
}
#Joint probability of yielding mutant (given resident) and that the mutant succesfuly invades
joint_prob<-function(l_a_mm,l_a_rr,mu,sd){
return(dnorm(l_a_mm,m_a+l_a_rr,s_a)*invasion_prob(l_a_mm,mu,sd))
}
#Birth probability: intergrate joint probability over all possible mutants.
birth_prob<-function(l_a_rr,mu,sd){
return(integrate(joint_prob,lower=-20,upper=0,l_a_rr=l_a_rr,mu=mu,sd=sd)$value)
}
find_mu_sd<-function(s_r,sigmaa){
n_samples<-1000#Number of samples
sum_m<-rep(0,n_samples)
for (i in 1:n_samples){
# sum_m[i]<-sum(head(sort(exp(sigmaa*rnorm(s_r,0,1))),-1))
sum_m[i]<-sum(exp(sigmaa*rnorm(s_r,0,1)))
}
mean_sum_m<-mean(log(sum_m))
sd_sum_m<-(var(log(sum_m)))^0.5
out<-list(mean_sum_m,sd_sum_m)
return(out)
}
##### options ####
invasion_prob_number_files<-1
replicates_per_web<-300
agg_granularity<-20
####### Statistics for the invasion probability using speciate() function ####
# Data preperation #####
webfiles<-sample(list.files(pattern = "web*[1-9][0-9][0-9]"),invasion_prob_number_files)
agg<-species_fitness_equilibrium$agg
web_numbs<-webfiles
test_agg<-10^seq(-6,-4.5,length.out=agg_granularity)
store<-data.frame(rep(test_agg,replicates_per_web*length(webfiles)));colnames(store)<-"agg";store<-data.frame(store[order(store$agg),]);colnames(store)<-"agg"
store$web<-rep(web_numbs,length(test_agg));store<-store[order(store$agg,store$web),];store$replicates<-rep(1:replicates_per_web,length(web_numbs)*length(test_agg));
store$fitness<-0;
seeds<-sample(1:10^4, size=replicates_per_web+2, replace = FALSE, prob = NULL)
total<-dim(store)[1]
system("rm before*")
command<-paste("/home/ore/Documents/Academic/PhD_Queen_Mary_2/all/Project_Code/C_++/NewWeb_new_new/build/Inspect -k random_seed=",
seeds[(i%%replicates_per_web+1)],
" -W ",0.1," ",
store[1,]$web,sep="")
system(command)
com_agg<-read.table("before_agg_for_matrix.dat")$V2
Sr<-sum(com_agg==com_agg[1])
com_agg<-com_agg[which(com_agg!=com_agg[1])]
# f_agg<-sample(com_agg,1)
# aggressivity_decay*(typical_aggressivity_ratio_da^rnorm(1,0,1))*f_agg
# store[i,]$agg<-f_agg
system("rm fitness_only.dat", wait=T,ignore.stdout=F,ignore.stderr = F)
# Simulation ####
for (i in (1:total)){
if (i%%replicates_per_web==0){seeds<-sample(1:10^4, size=replicates_per_web+1, replace = FALSE, prob = NULL)}
cat(i/total*100,"%","\r")
# command<-paste("singularity exec ../../../PDMM.img ../../../NewWeb/build/Inspect -k random_seed=",
command<-paste("/home/ore/Documents/Academic/PhD_Queen_Mary_2/all/Project_Code/C_++/NewWeb_new/build/Inspect -k random_seed=",
seeds[(i%%replicates_per_web+1)],
" -W ",store[i,]$agg," ",
store[i,]$web,sep="")
system("ulimit -c 0")
system(command, wait=T,ignore.stdout=T,ignore.stderr = T)
store[i,]$fitness<-read.table("fitness_only.dat",sep = " ")[,4];
system("rm fitness_only.dat", wait=T,ignore.stdout=F,ignore.stderr = F)
}
#Plot simulated  invasion fitness of a mutant and ... ####
invasion_prob_replicates<-replicates_per_web*length(webfiles)
fitness_plyr<-function(x){
return(sum(x>=0)/(invasion_prob_replicates))
}
mean_invasion_fitness_per_web<-ddply(store,.(agg,web),summarise,sim_prob=fitness_plyr(fitness))
with(mean_invasion_fitness_per_web,plot(log10(agg),sim_prob))
mu_sd<-find_mu_sd(Sr,sigma)
mu<-unlist(mu_sd[1]);sd<-unlist(mu_sd[2])
invasion_prob<-function(a_m,mu,sd){
pass<-(log(respiration/(the_conversion_efficiency_epsilon*a_m*K))-as.numeric(mu))/as.numeric(sd)
return(1-pnorm(pass,0,1))
}
#... compare to predicted ####
x_agg<-mean_invasion_fitness_per_web$agg
mean_invasion_fitness_per_web$pred_prob<-invasion_prob(x_agg,mu,sd)
with(mean_invasion_fitness_per_web,lines(log10(agg),pred_prob,col="red"))
#To get the right fit we need to approximate K=0.4 ...
mean_invasion_fitness_across_web<-ddply(store,.(agg),summarise,mean.fitness=fitness_plyr(fitness))
list_w<-unique(mean_invasion_fitness_per_web$web)
rm(list=setdiff(ls(),c("mean_invasion_fitness_per_web","Sr")))
save.image("invasion_prob_full.RData")
invasion_prob<-function(a_m,mu,sd){
pass<-(log(respiration/(the_conversion_efficiency_epsilon*a_m*K*0.5))-as.numeric(mu))/as.numeric(sd)
return(1-pnorm(pass,0,1))
}
#... compare to predicted ####
x_agg<-mean_invasion_fitness_per_web$agg
mean_invasion_fitness_per_web$pred_prob<-invasion_prob(x_agg,mu,sd)
with(mean_invasion_fitness_per_web,lines(log10(agg),pred_prob,col="red"))
#To get the right fit we need to approximate K=0.4 ...
mean_invasion_fitness_across_web<-ddply(store,.(agg),summarise,mean.fitness=fitness_plyr(fitness))
list_w<-unique(mean_invasion_fitness_per_web$web)
x_agg<-mean_invasion_fitness_per_web$agg
mean_invasion_fitness_per_web$pred_prob<-invasion_prob(x_agg,mu,sd)
with(mean_invasion_fitness_per_web,lines(log10(agg),pred_prob,col="red"))
library(Rfast)
library(plyr)
library(zoo)
library(survival)
library(maxLik)
library(plyr)
library(ggplot2)
library(deSolve)
library(RColorBrewer)
setwd("/home/ore/Documents/Academic/PhD_Queen_Mary_2/all/Paper_Data/R/Deconstructed/")
################################
#        Functions             #
################################
outcompeted <- function(H,t_H_HH,HHSums,HH2Sums){
directly <-
any( (HHSums-1) * t_H_HH >
(sum(H)-1) * HH2Sums )
if(directly) return(T)
return(directly) #directly |
}
findFitConsumer_tt <- function(agg){
repeat{
H <- agg*exp(rnorm(Sr,sd=sigma))*K*epsilon/resp
if(sum(H)>1) break
}
return(list(H=H,agg=agg))
}
serial_extinction_t<-function(Hi){
# Simulates the serial extinction process at equilibrium
repeat{
sum_Hi <- sum(Hi)
sum_H2i <- sum(Hi^2)
max_Hi <- max(Hi)
out<-Hi
if(sum_H2i >=  max_Hi*(sum_Hi-1)) break
deadd<-which.max(Hi)
Hi <- Hi[-deadd]
}
return(out)
}
find_mu_sd<-function(s_r,sigmaa){
#Function for estimating the expected value of the strongest link strength, i.e. E(max(exp(sigmaa*xi_{max,i})))
n_samples<-1000#Number of samples
sum_m<-rep(0,n_samples)
for (i in 1:n_samples){
sum_m[i]<-sum(exp(sigmaa*rnorm(s_r,0,1)))
}
mean_sum_m<-mean(log(sum_m))
sd_sum_m<-(var(log(sum_m)))^0.5
out<-list(mean_sum_m,sd_sum_m)
return(out)
}
parColMax <- function(M){
colMaxs(M,value=T,parallel=T)
}
parColWhichMax <- function(M){
colMaxs(M,value=F)
}
parColWhichMins <- function(M){
colMins(M,value=F)
}
pickRows <- function(M,indices){
M[matrix(c(indices,seq(length(indices))),ncol=2)]
}
parColSums <- function(M){
colsums(M,parallel=T)
}
gen_linnks <- function(aggs){
parent<-sample(aggs,1)
agg <- parent #(0.8^0.5)*(1.3^0.5)^rnorm(1)*
H <- agg*exp(rnorm(Sr,0,sigma))*constanttt
return(list(H=H,agg=agg,parent_number=which(aggs==parent)))
}
gen_linnks_mut <- function(aggs){
parent<-sample(aggs,1)
agg <- (0.8^0.5)*((1.3^0.5)^rnorm(1,0,1))*parent
H <- agg*exp(rnorm(Sr,0,sigma))*constanttt
return(list(H=H,agg=agg,parent_number=which(aggs==parent)))
}
find_mu_sd<-function(s_r,sigmaa){
#Function for estimating the expected value of the strongest link strength, i.e. E(max(exp(sigmaa*xi_{max,i})))
n_samples<-10000#Number of samples
sum_m<-rep(0,n_samples)
for (i in 1:n_samples){
sum_m[i]<-sum(exp(sigmaa*rnorm(s_r,0,1)))
}
mean_sum_m<-mean(log(sum_m))
sd_sum_m<-(var(log(sum_m)))^0.5
out<-list(mean_sum_m,sd_sum_m)
return(out)
}
invasion_prob_c<-function(l_a_m,mu,sd){
pass<-(log(resp/(epsilon*exp(l_a_m)*K*P_b_m))-as.numeric(mu))/(as.numeric(sd))
return(1-pnorm(pass,0,1))
}
invasion_prob_K<-function(l_a_m,mu,sd,K){
pass<-(log(resp/(epsilon*exp(l_a_m)*K))-as.numeric(mu))/(as.numeric(sd))
return(1-pnorm(pass,0,1))
}
birth_prob_c<-function(l_a_rr,mu,sd){
return(invasion_prob_c(l_a_rr+m_a,mu,sd))
# return(integrate(joint_prob_c,lower=-10,upper=10,l_a_rr=l_a_rr,mu=mu,sd=sd)$value)
}
birth_prob_K<-function(l_a_rr,mu,sd,K){
return(invasion_prob_K(l_a_rr+m_a,mu,sd,K))
# return(integrate(joint_prob_c,lower=-10,upper=10,l_a_rr=l_a_rr,mu=mu,sd=sd)$value)
}
mut_prob_given_ar<-function(l_a_m,l_a_r){
mu_a<-m_a+l_a_r
return(dnorm(l_a_m,mu_a,s_a))
}
joint_prob_c<-function(l_a_mm,l_a_rr,mu,sd){
return(mut_prob_given_ar(l_a_mm,l_a_rr)*invasion_prob_c(l_a_mm,mu,sd))
}
birth_prob_optim<-function(par){
mu<-par[1];sd<-par[2]
return(sum((invasion_prob_c(log(aggz)+m_a,mu,sd)-alll_mut_m)^2))
}
invasion_prob_optim<-function(par){
mu<-par[1];sd<-par[2]
return(sum((invasion_prob_c(log(aggz),mu,sd)-alll_m)^2))
}
#############################
#        Parameters         #
#############################
n_points<-15 # Number of fixed base attack rate values
aggz<-10^c(seq(-5.9,-4.5,length.out = n_points)) # Range of base attack rate values
m_a<-log(0.8^0.5)
sigma<-4; #Inverse niche width
resp<-0.1; # Respiration
K<-1;
epsilon<-0.1;
constanttt<-K*epsilon/resp
P_b_m<-1
doEst<-F
lwd=lwdd<-2
##############################################################
#     Invasion probability of a mutant once selected         #
##############################################################
# Sr variable loaded with this command too
load("../Full/invasion_prob_full.RData") # outputed from invasion_prob_full.R
alll<-data.frame()
nreps<-20000
for (i in 1:nreps){
H_list<-llply(aggz, function(x) gen_linnks(x)$H)
inv_list<-llply(H_list, function(x) sum(x)>1)
alll<-rbind(alll,unlist(inv_list))
}
alll_m<-colMeans(alll)
mult<-1.75
comm_cex_lab<-2
leg.cex<-1.3
pdf("images/Invasion_Probabillity.pdf",height=10*0.5*mult,width=10*0.5*mult)
par(mar=c(4,5,1,1))
plot(log10(aggz),alll_m,cex=0.1,type="l",xlab=expression(log[10](a[m])),ylab=expression(I(a[m])),
cex.lab=comm_cex_lab,cex.axis=comm_cex_lab)
with(mean_invasion_fitness_per_web,points(log10(agg),sim_prob))
legend("bottomright",legend=c("Numeric (deconstructed)","Numeric (full)","Numeric estimate of mean and variance",
"Analytic estimate of mean and variance","Optimised estimate of mean and variance" ),
pch=c(NA, 1,NA,NA,NA), lty=c(1,NA,1,1,1),
col=c("black","black","red","blue","green"),bty="n",cex=leg.cex,lwd=c(2),seg.len = 4)
# Prediction using numeric estimate of mu and sd
mu_sd<-find_mu_sd(275,sigma)
P_b_m<-1
prob_pred<-llply(aggz,function(x) invasion_prob_c(log(x),mu_sd[[1]],mu_sd[[2]]))
lines(log10(aggz),unlist(prob_pred),cex=0.1,type="l",col="red")
# Prediction using analytic estimate of mu and sd
g_mean_star<-sigma*sqrt(2*log(Sr))
g_sd_star<-sqrt(((sigma^2)/sqrt(sigma^2+g_mean_star^2)))#1/sqrt(1+2*log(dim(HH)[1]))
prob_pred_anal<-llply(aggz,function(x) invasion_prob_c(log(x),g_mean_star,g_sd_star))
lines(log10(aggz),unlist(prob_pred_anal),cex=0.1,type="l",col="blue")
# Prediction using optimised mu and sd
mu_sd_2<-optim(par=c(mu=mu_sd[[1]],sd=mu_sd[[2]]),fn=invasion_prob_optim)$par
prob_pred_opt<-llply(aggz,function(x) invasion_prob_c(log(x),mu_sd_2[1],mu_sd_2[2]))
lines(log10(aggz),unlist(prob_pred_opt),cex=0.1,type="l",col="green",lty=1)
dev.off()
par(mar=c(4,5,1,1))
plot(log10(aggz),alll_m,cex=0.1,type="l",xlab=expression(log[10](a[m])),ylab=expression(I(a[m])),
cex.lab=comm_cex_lab,cex.axis=comm_cex_lab)
with(mean_invasion_fitness_per_web,points(log10(agg),sim_prob))
legend("bottomright",legend=c("Numeric (deconstructed)","Numeric (full)","Numeric estimate of mean and variance",
"Analytic estimate of mean and variance","Optimised estimate of mean and variance" ),
pch=c(NA, 1,NA,NA,NA), lty=c(1,NA,1,1,1),
col=c("black","black","red","blue","green"),bty="n",cex=leg.cex,lwd=c(2),seg.len = 4)
# Prediction using numeric estimate of mu and sd
mu_sd<-find_mu_sd(275,sigma)
P_b_m<-1
prob_pred<-llply(aggz,function(x) invasion_prob_c(log(x),mu_sd[[1]],mu_sd[[2]]))
lines(log10(aggz),unlist(prob_pred),cex=0.1,type="l",col="red")
# Prediction using analytic estimate of mu and sd
g_mean_star<-sigma*sqrt(2*log(Sr))
g_sd_star<-sqrt(((sigma^2)/sqrt(sigma^2+g_mean_star^2)))#1/sqrt(1+2*log(dim(HH)[1]))
prob_pred_anal<-llply(aggz,function(x) invasion_prob_c(log(x),g_mean_star,g_sd_star))
lines(log10(aggz),unlist(prob_pred_anal),cex=0.1,type="l",col="blue")
# Prediction using optimised mu and sd
mu_sd_2<-optim(par=c(mu=mu_sd[[1]],sd=mu_sd[[2]]),fn=invasion_prob_optim)$par
prob_pred_opt<-llply(aggz,function(x) invasion_prob_c(log(x),mu_sd_2[1],mu_sd_2[2]))
lines(log10(aggz),unlist(prob_pred_opt),cex=0.1,type="l",col="green",lty=1)
mu_sd<-find_mu_sd(Sr,sigma)
P_b_m<-1
prob_pred<-llply(aggz,function(x) invasion_prob_c(log(x),mu_sd[[1]],mu_sd[[2]]))
lines(log10(aggz),unlist(prob_pred),cex=0.1,type="l",col="red")
library(plyr)
setwd("~/Documents/Academic/PhD_Queen_Mary_2/all/Paper_Data/R/Full")
load("all_data_3.RData")
#Functions #######
invasion_prob<-function(l_a_m,mu,sd){
pass<-(log(respiration/(the_conversion_efficiency_epsilon*exp(l_a_m)*K*0.5))-as.numeric(mu))/as.numeric(sd)
return(1-pnorm(pass,0,1))
}
#Joint probability of yielding mutant (given resident) and that the mutant succesfuly invades
joint_prob<-function(l_a_mm,l_a_rr,mu,sd){
return(dnorm(l_a_mm,m_a+l_a_rr,s_a)*invasion_prob(l_a_mm,mu,sd))
}
#Birth probability: intergrate joint probability over all possible mutants.
birth_prob<-function(l_a_rr,mu,sd){
return(integrate(joint_prob,lower=-20,upper=0,l_a_rr=l_a_rr,mu=mu,sd=sd)$value)
}
find_mu_sd<-function(s_r,sigmaa){
n_samples<-1000#Number of samples
sum_m<-rep(0,n_samples)
for (i in 1:n_samples){
# sum_m[i]<-sum(head(sort(exp(sigmaa*rnorm(s_r,0,1))),-1))
sum_m[i]<-sum(exp(sigmaa*rnorm(s_r,0,1)))
}
mean_sum_m<-mean(log(sum_m))
sd_sum_m<-(var(log(sum_m)))^0.5
out<-list(mean_sum_m,sd_sum_m)
return(out)
}
##### options ####
invasion_prob_number_files<-1
replicates_per_web<-50
agg_granularity<-20
####### Statistics for the invasion probability using speciate() function ####
# Data preperation #####
webfiles<-sample(list.files(pattern = "web*[1-9][0-9][0-9]"),invasion_prob_number_files)
agg<-species_fitness_equilibrium$agg
web_numbs<-webfiles
test_agg<-10^seq(-6,-4.5,length.out=agg_granularity)
store<-data.frame(rep(test_agg,replicates_per_web*length(webfiles)));colnames(store)<-"agg";store<-data.frame(store[order(store$agg),]);colnames(store)<-"agg"
store$web<-rep(web_numbs,length(test_agg));store<-store[order(store$agg,store$web),];store$replicates<-rep(1:replicates_per_web,length(web_numbs)*length(test_agg));
store$fitness<-0;
seeds<-sample(1:10^4, size=replicates_per_web+2, replace = FALSE, prob = NULL)
total<-dim(store)[1]
system("rm before*")
command<-paste("/home/ore/Documents/Academic/PhD_Queen_Mary_2/all/Project_Code/C_++/NewWeb_new_new/build/Inspect -k random_seed=",
seeds[(i%%replicates_per_web+1)],
" -W ",0.1," ",
store[1,]$web,sep="")
system(command)
com_agg<-read.table("before_agg_for_matrix.dat")$V2
Sr<-sum(com_agg==com_agg[1])
com_agg<-com_agg[which(com_agg!=com_agg[1])]
# f_agg<-sample(com_agg,1)
# aggressivity_decay*(typical_aggressivity_ratio_da^rnorm(1,0,1))*f_agg
# store[i,]$agg<-f_agg
system("rm fitness_only.dat", wait=T,ignore.stdout=F,ignore.stderr = F)
# Simulation ####
for (i in (1:total)){
if (i%%replicates_per_web==0){seeds<-sample(1:10^4, size=replicates_per_web+1, replace = FALSE, prob = NULL)}
cat(i/total*100,"%","\r")
# command<-paste("singularity exec ../../../PDMM.img ../../../NewWeb/build/Inspect -k random_seed=",
command<-paste("/home/ore/Documents/Academic/PhD_Queen_Mary_2/all/Project_Code/C_++/NewWeb_new/build/Inspect -k random_seed=",
seeds[(i%%replicates_per_web+1)],
" -W ",store[i,]$agg," ",
store[i,]$web,sep="")
system("ulimit -c 0")
system(command, wait=T,ignore.stdout=T,ignore.stderr = T)
store[i,]$fitness<-read.table("fitness_only.dat",sep = " ")[,4];
system("rm fitness_only.dat", wait=T,ignore.stdout=F,ignore.stderr = F)
}
invasion_prob_replicates<-replicates_per_web*length(webfiles)
fitness_plyr<-function(x){
return(sum(x>=0)/(invasion_prob_replicates))
}
mean_invasion_fitness_per_web<-ddply(store,.(agg,web),summarise,sim_prob=fitness_plyr(fitness))
with(mean_invasion_fitness_per_web,plot(log10(agg),sim_prob))
mu_sd<-find_mu_sd(Sr,sigma)
mu<-unlist(mu_sd[1]);sd<-unlist(mu_sd[2])
invasion_prob<-function(a_m,mu,sd){
pass<-(log(respiration/(the_conversion_efficiency_epsilon*a_m*K*0.5))-as.numeric(mu))/as.numeric(sd)
return(1-pnorm(pass,0,1))
}
#... compare to predicted ####
x_agg<-mean_invasion_fitness_per_web$agg
mean_invasion_fitness_per_web$pred_prob<-invasion_prob(x_agg,mu,sd)
with(mean_invasion_fitness_per_web,lines(log10(agg),pred_prob,col="red"))
rm(list=setdiff(ls(),c("mean_invasion_fitness_per_web","Sr")))
save.image("invasion_prob_full.RData")
